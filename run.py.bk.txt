# from app import create_app
# from flask_cors import CORS
# import os
# from dotenv import load_dotenv

# # Load environment variables from .env file
# load_dotenv()

# app = create_app()
# CORS(app)

# if __name__ == '__main__':
#     # Get values from environment variables
#     host = os.getenv('FLASK_RUN_HOST', '127.0.0.1')  # Default is '127.0.0.1'
#     port = int(os.getenv('FLASK_RUN_PORT', 5000))  # Default is 5000
#     debug = os.getenv('FLASK_DEBUG', 'False').lower() == 'true'  # Convert to boolean

#     app.run(host=host, port=port, debug=debug)



# from app import create_app
# from flask_cors import CORS
# import os
# from dotenv import load_dotenv

# # Load environment variables from .env file
# load_dotenv()

# app = create_app()

# # Configure CORS
# CORS(
#     app,
#     resources={r"/*": {"origins": "*"}},  # Allow all origins for all routes
#     methods=["GET", "POST", "PUT", "DELETE", "OPTIONS"],  # Allowed methods
#     allow_headers=["Content-Type", "Authorization"],  # Allowed headers
# )

# if __name__ == '__main__':
#     # Get values from environment variables
#     host = os.getenv('FLASK_RUN_HOST', '127.0.0.1')  # Default is '127.0.0.1'
#     port = int(os.getenv('FLASK_RUN_PORT', 5000))  # Default is 5000
#     debug = os.getenv('FLASK_DEBUG', 'False').lower() == 'true'  # Convert to boolean

#     app.run(host=host, port=port, debug=debug)


from app import create_app
import os
from dotenv import load_dotenv
from flask_cors import CORS
import threading
from app.asterisk_core.scheduler_service import SchedulerService


# Load environment variables from .env file
load_dotenv()

app = create_app()



# Add this at the end of your run.py
def initialize_scheduler(app):
    # Get AMI config from your environment or config
    ami_config = {
        'host': os.getenv('ASTERISK_HOST'),#app.config.get('ASTERISK_HOST', os.getenv('ASTERISK_HOST')),
        'port': 5038,#os.getenv('ASTERISK_PORT'),#app.config.get('ASTERISK_PORT', os.getenv('ASTERISK_PORT')),
        'username': os.getenv('ASTERISK_USERNAME'),#app.config.get('ASTERISK_USERNAME', os.getenv('ASTERISK_USERNAME')),
        'secret': os.getenv('ASTERISK_SECRET')#app.config.get('ASTERISK_SECRET', os.getenv('ASTERISK_SECRET'))
    }
    print(ami_config)

    scheduler = SchedulerService(ami_config)
    scheduler_thread = threading.Thread(target=scheduler.start)
    scheduler_thread.daemon = True
    scheduler_thread.start()
    
    # Store scheduler instance in app context for cleanup
    app.scheduler = scheduler
    
    # Register cleanup on app shutdown
    @app.teardown_appcontext
    
    def cleanup(exception=None):
        if hasattr(app, 'scheduler'):
            app.scheduler.stop()


initialize_scheduler(app)

CORS(
    app,
    resources={r"/*": {"origins": "*"}},  # Allow all origins for all routes
    methods=["GET", "POST", "PUT", "DELETE", "OPTIONS"],  # Allowed methods
    allow_headers=["Content-Type", "Authorization"],  # Allowed headers
)

if __name__ == '__main__':
    # Get values from environment variables
    host = os.getenv('FLASK_RUN_HOST', '0.0.0.0')  # Default is '127.0.0.1'
    port = int(os.getenv('FLASK_RUN_PORT', 3001))  # Default is 5000
    debug = os.getenv('FLASK_DEBUG', 'False').lower() == 'true'  # Convert to boolean

    app.run(host=host, port=port, debug=debug)
